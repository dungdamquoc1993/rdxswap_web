{"ast":null,"code":"import { ethers } from 'ethers';\nimport { MasterChef, ScamCoin, RedDotToken } from './constant';\nconst {\n  ethereum\n} = window;\nexport const getContract = contractName => {\n  if (!ethereum) {\n    alert('please install metamask˝');\n  }\n\n  let contract;\n  const provider = new ethers.providers.JsonRpcProvider(ethereum); // const signer = provider.getSigner()\n\n  if (contractName === 'MSC') {\n    // signer.sendTransaction({to: MasterChef.contractAddress, value: 1000})\n    contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, provider);\n  } else if (contractName === 'RDX') {\n    // signer.sendTransaction({to: RedDotToken.contractAddress, value: 1000})\n    contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, provider);\n  } else if (contractName === 'SAM') {\n    // signer.sendTransaction({to: ScamCoin.contractAddress, value: 1000})\n    contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, provider);\n  }\n\n  return contract;\n};","map":{"version":3,"names":["ethers","MasterChef","ScamCoin","RedDotToken","ethereum","window","getContract","contractName","alert","contract","provider","providers","JsonRpcProvider","Contract","contractAddress","contractABI"],"sources":["/Users/damquocdung/Desktop/masterchef_web/src/utils/getContract.js"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport { MasterChef, ScamCoin, RedDotToken } from './constant'\nconst { ethereum } = window\n\nexport const getContract = (contractName) => {\n    if (!ethereum) {\n        alert('please install metamask˝')\n    }\n    let contract\n    const provider = new ethers.providers.JsonRpcProvider(ethereum)\n    // const signer = provider.getSigner()\n    if (contractName === 'MSC') {\n        // signer.sendTransaction({to: MasterChef.contractAddress, value: 1000})\n        contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, provider)\n    } else if (contractName === 'RDX') {\n        // signer.sendTransaction({to: RedDotToken.contractAddress, value: 1000})\n        contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, provider)\n    } else if (contractName === 'SAM') {\n        // signer.sendTransaction({to: ScamCoin.contractAddress, value: 1000})\n        contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, provider)\n    }\n    return contract\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,YAAlD;AACA,MAAM;EAAEC;AAAF,IAAeC,MAArB;AAEA,OAAO,MAAMC,WAAW,GAAIC,YAAD,IAAkB;EACzC,IAAI,CAACH,QAAL,EAAe;IACXI,KAAK,CAAC,0BAAD,CAAL;EACH;;EACD,IAAIC,QAAJ;EACA,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,eAArB,CAAqCR,QAArC,CAAjB,CALyC,CAMzC;;EACA,IAAIG,YAAY,KAAK,KAArB,EAA4B;IACxB;IACAE,QAAQ,GAAG,IAAIT,MAAM,CAACa,QAAX,CAAoBZ,UAAU,CAACa,eAA/B,EAAgDb,UAAU,CAACc,WAA3D,EAAwEL,QAAxE,CAAX;EACH,CAHD,MAGO,IAAIH,YAAY,KAAK,KAArB,EAA4B;IAC/B;IACAE,QAAQ,GAAG,IAAIT,MAAM,CAACa,QAAX,CAAoBV,WAAW,CAACW,eAAhC,EAAiDX,WAAW,CAACY,WAA7D,EAA0EL,QAA1E,CAAX;EACH,CAHM,MAGA,IAAIH,YAAY,KAAK,KAArB,EAA4B;IAC/B;IACAE,QAAQ,GAAG,IAAIT,MAAM,CAACa,QAAX,CAAoBX,QAAQ,CAACY,eAA7B,EAA8CZ,QAAQ,CAACa,WAAvD,EAAoEL,QAApE,CAAX;EACH;;EACD,OAAOD,QAAP;AACH,CAlBM"},"metadata":{},"sourceType":"module"}