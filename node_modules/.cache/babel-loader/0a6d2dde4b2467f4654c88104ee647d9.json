{"ast":null,"code":"import { ethers } from 'ethers';\nimport { MasterChef, UNIToken, RDXToken, WJKToken } from './constant';\nconst {\n  ethereum\n} = window;\nexport const getContract = async contractName => {\n  if (!ethereum) {\n    alert('please install metamask˝');\n  }\n\n  let contract;\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner(); // console.log(\"Account address s:\", await signer.getAddress());\n\n  if (contractName === 'MSC') {\n    contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, signer);\n  } else if (contractName === 'RDX') {\n    contract = new ethers.Contract(RDXToken.contractAddress, RDXToken.contractABI, signer);\n  } else if (contractName === 'WJK') {\n    contract = new ethers.Contract(WJKToken.contractAddress, WJKToken.contractABI, signer);\n  } else if (contractName === 'UNI') {\n    contract = new ethers.Contract(UNIToken.contractAddress, UNIToken.contractABI, signer);\n  }\n\n  return contract;\n};","map":{"version":3,"names":["ethers","MasterChef","UNIToken","RDXToken","WJKToken","ethereum","window","getContract","contractName","alert","contract","provider","providers","Web3Provider","signer","getSigner","Contract","contractAddress","contractABI"],"sources":["/Users/damquocdung/Desktop/masterchef_main/masterchef_web/src/utils/getContract.js"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport { MasterChef, UNIToken, RDXToken, WJKToken } from './constant'\nconst { ethereum } = window\n\nexport const getContract = async (contractName) => {\n    if (!ethereum) {\n        alert('please install metamask˝')\n    }\n    let contract\n    const provider = new ethers.providers.Web3Provider(ethereum)\n\n    const signer = provider.getSigner()\n    // console.log(\"Account address s:\", await signer.getAddress());\n\n    if (contractName === 'MSC') {\n        contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, signer)\n    } else if (contractName === 'RDX') {\n        contract = new ethers.Contract(RDXToken.contractAddress, RDXToken.contractABI, signer)\n    } else if (contractName === 'WJK') {\n        contract = new ethers.Contract(WJKToken.contractAddress, WJKToken.contractABI, signer)\n    } else if (contractName === 'UNI') {\n        contract = new ethers.Contract(UNIToken.contractAddress, UNIToken.contractABI, signer)\n    }\n    return contract\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,QAA/B,EAAyCC,QAAzC,QAAyD,YAAzD;AACA,MAAM;EAAEC;AAAF,IAAeC,MAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAOC,YAAP,IAAwB;EAC/C,IAAI,CAACH,QAAL,EAAe;IACXI,KAAK,CAAC,0BAAD,CAAL;EACH;;EACD,IAAIC,QAAJ;EACA,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAP,CAAiBC,YAArB,CAAkCR,QAAlC,CAAjB;EAEA,MAAMS,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf,CAP+C,CAQ/C;;EAEA,IAAIP,YAAY,KAAK,KAArB,EAA4B;IACxBE,QAAQ,GAAG,IAAIV,MAAM,CAACgB,QAAX,CAAoBf,UAAU,CAACgB,eAA/B,EAAgDhB,UAAU,CAACiB,WAA3D,EAAwEJ,MAAxE,CAAX;EACH,CAFD,MAEO,IAAIN,YAAY,KAAK,KAArB,EAA4B;IAC/BE,QAAQ,GAAG,IAAIV,MAAM,CAACgB,QAAX,CAAoBb,QAAQ,CAACc,eAA7B,EAA8Cd,QAAQ,CAACe,WAAvD,EAAoEJ,MAApE,CAAX;EACH,CAFM,MAEA,IAAIN,YAAY,KAAK,KAArB,EAA4B;IAC/BE,QAAQ,GAAG,IAAIV,MAAM,CAACgB,QAAX,CAAoBZ,QAAQ,CAACa,eAA7B,EAA8Cb,QAAQ,CAACc,WAAvD,EAAoEJ,MAApE,CAAX;EACH,CAFM,MAEA,IAAIN,YAAY,KAAK,KAArB,EAA4B;IAC/BE,QAAQ,GAAG,IAAIV,MAAM,CAACgB,QAAX,CAAoBd,QAAQ,CAACe,eAA7B,EAA8Cf,QAAQ,CAACgB,WAAvD,EAAoEJ,MAApE,CAAX;EACH;;EACD,OAAOJ,QAAP;AACH,CApBM"},"metadata":{},"sourceType":"module"}