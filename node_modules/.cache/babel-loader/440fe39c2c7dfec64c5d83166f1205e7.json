{"ast":null,"code":"import { ethers } from 'ethers';\nimport { MasterChef, ScamCoin, RedDotToken } from './constant';\nconst {\n  ethereum\n} = window;\nexport const getContract = contractName => {\n  if (!ethereum) {\n    alert('please install metamask˝');\n  }\n\n  let contract;\n  const provider = new ethers.providers.JsonRpcProvider(ethereum);\n  const signer = provider.getSigner();\n\n  if (contractName === 'MSC') {\n    signer.sendTransaction({\n      to: MasterChef.contractAddress,\n      value: 1000\n    });\n    contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, signer);\n  } else if (contractName === 'RDX') {\n    signer.sendTransaction({\n      to: RedDotToken.contractAddress,\n      value: 1000\n    });\n    contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, signer);\n  } else if (contractName === 'SAM') {\n    signer.sendTransaction({\n      to: ScamCoin.contractAddress,\n      value: 1000\n    });\n    contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, signer);\n  }\n\n  return contract;\n};","map":{"version":3,"names":["ethers","MasterChef","ScamCoin","RedDotToken","ethereum","window","getContract","contractName","alert","contract","provider","providers","JsonRpcProvider","signer","getSigner","sendTransaction","to","contractAddress","value","Contract","contractABI"],"sources":["/Users/damquocdung/Desktop/masterchef_web/src/utils/getContract.js"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport { MasterChef, ScamCoin, RedDotToken } from './constant'\nconst { ethereum } = window\n\nexport const getContract = (contractName) => {\n    if (!ethereum) {\n        alert('please install metamask˝')\n    }\n    let contract\n    const provider = new ethers.providers.JsonRpcProvider(ethereum)\n    const signer = provider.getSigner()\n    if (contractName === 'MSC') {\n        signer.sendTransaction({to: MasterChef.contractAddress, value: 1000})\n        contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, signer)\n    } else if (contractName === 'RDX') {\n        signer.sendTransaction({to: RedDotToken.contractAddress, value: 1000})\n        contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, signer)\n    } else if (contractName === 'SAM') {\n        signer.sendTransaction({to: ScamCoin.contractAddress, value: 1000})\n        contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, signer)\n    }\n    return contract\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,YAAlD;AACA,MAAM;EAAEC;AAAF,IAAeC,MAArB;AAEA,OAAO,MAAMC,WAAW,GAAIC,YAAD,IAAkB;EACzC,IAAI,CAACH,QAAL,EAAe;IACXI,KAAK,CAAC,0BAAD,CAAL;EACH;;EACD,IAAIC,QAAJ;EACA,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,eAArB,CAAqCR,QAArC,CAAjB;EACA,MAAMS,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;;EACA,IAAIP,YAAY,KAAK,KAArB,EAA4B;IACxBM,MAAM,CAACE,eAAP,CAAuB;MAACC,EAAE,EAAEf,UAAU,CAACgB,eAAhB;MAAiCC,KAAK,EAAE;IAAxC,CAAvB;IACAT,QAAQ,GAAG,IAAIT,MAAM,CAACmB,QAAX,CAAoBlB,UAAU,CAACgB,eAA/B,EAAgDhB,UAAU,CAACmB,WAA3D,EAAwEP,MAAxE,CAAX;EACH,CAHD,MAGO,IAAIN,YAAY,KAAK,KAArB,EAA4B;IAC/BM,MAAM,CAACE,eAAP,CAAuB;MAACC,EAAE,EAAEb,WAAW,CAACc,eAAjB;MAAkCC,KAAK,EAAE;IAAzC,CAAvB;IACAT,QAAQ,GAAG,IAAIT,MAAM,CAACmB,QAAX,CAAoBhB,WAAW,CAACc,eAAhC,EAAiDd,WAAW,CAACiB,WAA7D,EAA0EP,MAA1E,CAAX;EACH,CAHM,MAGA,IAAIN,YAAY,KAAK,KAArB,EAA4B;IAC/BM,MAAM,CAACE,eAAP,CAAuB;MAACC,EAAE,EAAEd,QAAQ,CAACe,eAAd;MAA+BC,KAAK,EAAE;IAAtC,CAAvB;IACAT,QAAQ,GAAG,IAAIT,MAAM,CAACmB,QAAX,CAAoBjB,QAAQ,CAACe,eAA7B,EAA8Cf,QAAQ,CAACkB,WAAvD,EAAoEP,MAApE,CAAX;EACH;;EACD,OAAOJ,QAAP;AACH,CAlBM"},"metadata":{},"sourceType":"module"}