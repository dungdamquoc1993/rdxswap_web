{"ast":null,"code":"import { ethers } from 'ethers';\nimport { MasterChef, ScamCoin, RedDotToken } from './constant';\nconst {\n  ethereum\n} = window;\nexport const getContract = async contractName => {\n  if (!ethereum) {\n    alert('please install metamask˝');\n  }\n\n  let contract;\n  const provider = new ethers.providers.JsonRpcProvider(ethereum);\n  const signer = provider.getSigner();\n  console.log(\"Account address s:\", await signer.getAddress()); // if (contractName === 'MSC') {\n  //     contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, signer)\n  // } else if (contractName === 'RDX') {\n  //     contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, signer)\n  // } else if (contractName === 'SAM') {\n  //     contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, signer)\n  // }\n  // return contract\n};","map":{"version":3,"names":["ethers","MasterChef","ScamCoin","RedDotToken","ethereum","window","getContract","contractName","alert","contract","provider","providers","JsonRpcProvider","signer","getSigner","console","log","getAddress"],"sources":["/Users/damquocdung/Desktop/masterchef_web/src/utils/getContract.js"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport { MasterChef, ScamCoin, RedDotToken } from './constant'\nconst { ethereum } = window\n\nexport const getContract = async (contractName) => {\n    if (!ethereum) {\n        alert('please install metamask˝')\n    }\n    let contract\n    const provider = new ethers.providers.JsonRpcProvider(ethereum)\n    const signer = provider.getSigner()\n    console.log(\"Account address s:\", await signer.getAddress());\n\n    // if (contractName === 'MSC') {\n    //     contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, signer)\n    // } else if (contractName === 'RDX') {\n    //     contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, signer)\n    // } else if (contractName === 'SAM') {\n    //     contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, signer)\n    // }\n    // return contract\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,YAAlD;AACA,MAAM;EAAEC;AAAF,IAAeC,MAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAOC,YAAP,IAAwB;EAC/C,IAAI,CAACH,QAAL,EAAe;IACXI,KAAK,CAAC,0BAAD,CAAL;EACH;;EACD,IAAIC,QAAJ;EACA,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,eAArB,CAAqCR,QAArC,CAAjB;EACA,MAAMS,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;EACAC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,MAAMH,MAAM,CAACI,UAAP,EAAxC,EAP+C,CAS/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACH,CAjBM"},"metadata":{},"sourceType":"module"}