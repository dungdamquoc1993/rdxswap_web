{"ast":null,"code":"import { ethers } from 'ethers';\nimport { MasterChef, ScamCoin, RedDotToken } from './constant';\nconst {\n  ethereum\n} = window;\nexport const getContract = async contractName => {\n  if (!ethereum) {\n    alert('please install metamask˝');\n  }\n\n  let contract;\n  const provider = new ethers.providers.Web3Provider(ethereum);\n  const signer = provider.getSigner();\n  console.log(\"Account address s:\", await signer.getAddress());\n\n  if (contractName === 'MSC') {\n    contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, provider);\n  } else if (contractName === 'RDX') {\n    contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, provider);\n  } else if (contractName === 'SAM') {\n    contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, provider);\n    const name = await contract.name();\n    console.log(name);\n  }\n\n  return contract;\n};","map":{"version":3,"names":["ethers","MasterChef","ScamCoin","RedDotToken","ethereum","window","getContract","contractName","alert","contract","provider","providers","Web3Provider","signer","getSigner","console","log","getAddress","Contract","contractAddress","contractABI","name"],"sources":["/Users/damquocdung/Desktop/masterchef_web/src/utils/getContract.js"],"sourcesContent":["import { ethers } from 'ethers'\n\nimport { MasterChef, ScamCoin, RedDotToken } from './constant'\nconst { ethereum } = window\n\nexport const getContract = async (contractName) => {\n    if (!ethereum) {\n        alert('please install metamask˝')\n    }\n    let contract\n    const provider = new ethers.providers.Web3Provider(ethereum)\n\n    const signer = provider.getSigner()\n    console.log(\"Account address s:\", await signer.getAddress());\n\n    if (contractName === 'MSC') {\n        contract = new ethers.Contract(MasterChef.contractAddress, MasterChef.contractABI, provider)\n    } else if (contractName === 'RDX') {\n        contract = new ethers.Contract(RedDotToken.contractAddress, RedDotToken.contractABI, provider)\n    } else if (contractName === 'SAM') {\n        contract = new ethers.Contract(ScamCoin.contractAddress, ScamCoin.contractABI, provider)\n        const name = await contract.name()\n        console.log(name)\n    }\n    return contract\n}"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AAEA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,WAA/B,QAAkD,YAAlD;AACA,MAAM;EAAEC;AAAF,IAAeC,MAArB;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAOC,YAAP,IAAwB;EAC/C,IAAI,CAACH,QAAL,EAAe;IACXI,KAAK,CAAC,0BAAD,CAAL;EACH;;EACD,IAAIC,QAAJ;EACA,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCR,QAAlC,CAAjB;EAEA,MAAMS,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;EACAC,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkC,MAAMH,MAAM,CAACI,UAAP,EAAxC;;EAEA,IAAIV,YAAY,KAAK,KAArB,EAA4B;IACxBE,QAAQ,GAAG,IAAIT,MAAM,CAACkB,QAAX,CAAoBjB,UAAU,CAACkB,eAA/B,EAAgDlB,UAAU,CAACmB,WAA3D,EAAwEV,QAAxE,CAAX;EACH,CAFD,MAEO,IAAIH,YAAY,KAAK,KAArB,EAA4B;IAC/BE,QAAQ,GAAG,IAAIT,MAAM,CAACkB,QAAX,CAAoBf,WAAW,CAACgB,eAAhC,EAAiDhB,WAAW,CAACiB,WAA7D,EAA0EV,QAA1E,CAAX;EACH,CAFM,MAEA,IAAIH,YAAY,KAAK,KAArB,EAA4B;IAC/BE,QAAQ,GAAG,IAAIT,MAAM,CAACkB,QAAX,CAAoBhB,QAAQ,CAACiB,eAA7B,EAA8CjB,QAAQ,CAACkB,WAAvD,EAAoEV,QAApE,CAAX;IACA,MAAMW,IAAI,GAAG,MAAMZ,QAAQ,CAACY,IAAT,EAAnB;IACAN,OAAO,CAACC,GAAR,CAAYK,IAAZ;EACH;;EACD,OAAOZ,QAAP;AACH,CApBM"},"metadata":{},"sourceType":"module"}